<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://voromir.github.io/blog</id>
    <title>Dev journey Blog</title>
    <updated>2025-04-02T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://voromir.github.io/blog"/>
    <subtitle>Dev journey Blog</subtitle>
    <icon>https://voromir.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[How to use alias]]></title>
        <id>https://voromir.github.io/blog/2025/04/02/aliases</id>
        <link href="https://voromir.github.io/blog/2025/04/02/aliases"/>
        <updated>2025-04-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is an alias?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-an-alias">What is an alias?<a href="https://voromir.github.io/blog/2025/04/02/aliases#what-is-an-alias" class="hash-link" aria-label="Direct link to What is an alias?" title="Direct link to What is an alias?">​</a></h2>
<p>An alias is an alternative name for a command or a group of commands. It allows you to run an instruction using a custom command in your command line interpreter. Using aliases can improve productivity and make the command line easier to use. Setting aliases for repetitive tasks or very complex commands can simplify your workflow and make it more efficient. Shell shortcuts, Git, project-specific aliases or NPM commands are some of the use cases where you can benefit from setting aliases.</p>
<p>You don’t need to go overboard creating aliases for everything. Focus on how often you use a command and how long it takes to run. If it’s something you rarely use, there’s no need to optimize it. But if it’s a command you run every day, multiple times, creating an alias can save you time and effort. I have lots of clever aliases, but the ones that I enjoy the most are very basic: npm run, start, dev, serve, test and git commands. Use the Pareto rule and optimize the 20%</p>
<p>You can set an alias like this:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">alias ll='ls -alF'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you want to persist your aliases over the current session, you need to store them in your shell config file, e.g.:<code>~/.bashrc</code> or <code>~/.zshrc</code>. This file loads every time you open a new terminal session and it modifies your $PATH variable in the runtime.</p>
<p>If you edit your <code>.zshrc</code> file you will need to open a new terminal or do <code>source ~/.zshrc</code> to reload the shell cofiguration. If you are using OMZsh you can do it by running <code>omz reload</code>.</p>
<p>If you want to change the location of <code>.zshrc</code> you need to set it up in <code>.zprofile</code> file.</p>
<p>If you don't want to use an already cluttered <code>.zshrc</code> file and prefer to keep your aliases in a separate file, you can place them in the directory stored in your <code>ZSH_CUSTOM</code> system variable. Typically, this variable stores <code>.oh-my-zsh/custom</code>, so you can create a <code>.zsh</code> file there and name it as you prefer (e.g., <code>custom_aliases.zsh</code>). You can store all your aliases in this file just as you would in <code>.zshrc</code>, and your system will load them when <code>.zshrc</code> is sourced. This way you separate concerns and keep you personal aliases separated from all the other setups present in <code>.zshrc</code>.</p>
<p>If you don't use OhMyZsh, by default ZSH only loads specific files (~/.zshrc ~/.zprofile ~/.zshenv ~/.zlogin ~/.zlogout), and you cannot add directly a custom alias file. Instead, you need to write the logic to source the file you want to import. In your <code>.zshrc</code> you can add imports like this:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">source ~/.zsh/aliases.zsh</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">source ~/.zsh/functions.zsh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you want to add more files in the future, and don't want to constantly modify your <code>.zshrc</code> you can do a for loop and import everything in a certain directory:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Source all personal config files</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">for file in ~/.zsh/*.zsh; do</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  source "$file"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">done</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can list all currently defined aliases using the command:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">alias</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Or you can check a specific alias:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">alias ll</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Alternatively, you can use <code>type ll</code> to know which command will be run. This command shows you if it's a shell built in, an alias or a binary.</p>
<p>Unsetting an Alias
You can remove an alias with the unalias command:</p>
<div class="language-bsh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bsh codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">unalias ll</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>How do aliases work?</p>
<p>Alias expansion:</p>
<ol>
<li>Tokenization</li>
<li>Alias lookup: The shell first checks if the first word of your command matches an alias in some of your configuration files. If it does, it replaces that word with the alias's definition. This process is known as alias expansion.</li>
<li>Command execution</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="alias-precedence">Alias precedence<a href="https://voromir.github.io/blog/2025/04/02/aliases#alias-precedence" class="hash-link" aria-label="Direct link to Alias precedence" title="Direct link to Alias precedence">​</a></h3>
<p>By default, alias expansion is disabled in non-interactive shells (like in scripts) to avoid unexpected behavior. In interactive shells, however, alias expansion is enabled.</p>
<p>The order of precedence is:</p>
<ul>
<li>Shell functions (highest precedence)</li>
<li>Aliases</li>
<li>Built-in commands (e.g., <code>echo</code>, <code>cd</code>)</li>
<li>External commands found in <code>$PATH</code> (executables)</li>
</ul>
<p>So, if you have both a shell function and an alias with the same name, the shell function will take precedence, not the alias.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="aliases-in-omzsh">Aliases in OMZsh<a href="https://voromir.github.io/blog/2025/04/02/aliases#aliases-in-omzsh" class="hash-link" aria-label="Direct link to Aliases in OMZsh" title="Direct link to Aliases in OMZsh">​</a></h3>
<p>One of the greatest benefits of using OMZsh is all the predefined aliases that it provides. Some of the aliases and scripts you can use in OMZsh are:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="-general-command-shortcuts">🔹 General Command Shortcuts<a href="https://voromir.github.io/blog/2025/04/02/aliases#-general-command-shortcuts" class="hash-link" aria-label="Direct link to 🔹 General Command Shortcuts" title="Direct link to 🔹 General Command Shortcuts">​</a></h4>
<table><thead><tr><th>Alias</th><th>Expands To</th><th>Description</th></tr></thead><tbody><tr><td><code>ll</code></td><td><code>ls -lh</code></td><td>Long format with human-readable sizes</td></tr><tr><td><code>la</code></td><td><code>ls -lha</code></td><td>Show hidden files too</td></tr><tr><td><code>l</code></td><td><code>ls -l</code></td><td>Long format without hidden files</td></tr><tr><td><code>..</code></td><td><code>cd ..</code></td><td>Move up one directory</td></tr><tr><td><code>...</code></td><td><code>cd ../..</code></td><td>Move up two directories</td></tr><tr><td><code>....</code></td><td><code>cd ../../..</code></td><td>Move up three directories</td></tr><tr><td><code>c</code></td><td><code>clear</code></td><td>Clear terminal</td></tr><tr><td><code>md</code></td><td><code>mkdir -p</code></td><td>Create a directory and parent directories if needed</td></tr><tr><td><code>rd</code></td><td><code>rmdir</code></td><td>Remove empty directory</td></tr></tbody></table>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="-other-useful-aliases">🔹 Other Useful Aliases<a href="https://voromir.github.io/blog/2025/04/02/aliases#-other-useful-aliases" class="hash-link" aria-label="Direct link to 🔹 Other Useful Aliases" title="Direct link to 🔹 Other Useful Aliases">​</a></h4>
<table><thead><tr><th>Alias</th><th>Expands To</th><th>Description</th></tr></thead><tbody><tr><td><code>brewu</code></td><td><code>brew update</code></td><td>Update Homebrew and installed packages</td></tr><tr><td><code>npmi</code></td><td><code>npm install</code></td><td>Install dependencies in a Node.js project</td></tr><tr><td><code>ping</code></td><td><code>ping -c 5</code></td><td>Ping with 5 packets instead of infinite</td></tr><tr><td><code>yarn</code></td><td><code>yarn</code></td><td>Run Yarn package manager</td></tr></tbody></table>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="-git-aliases-enabled-by-default-in-omz">🔹 Git Aliases (enabled by default in OMZ)<a href="https://voromir.github.io/blog/2025/04/02/aliases#-git-aliases-enabled-by-default-in-omz" class="hash-link" aria-label="Direct link to 🔹 Git Aliases (enabled by default in OMZ)" title="Direct link to 🔹 Git Aliases (enabled by default in OMZ)">​</a></h4>
<table><thead><tr><th>Alias</th><th>Expands To</th><th>Description</th></tr></thead><tbody><tr><td><code>gst</code></td><td><code>git status</code></td><td>Show current repo status</td></tr><tr><td><code>gco</code></td><td><code>git checkout</code></td><td>Checkout a branch</td></tr><tr><td><code>gcmsg</code></td><td><code>git commit -m</code></td><td>Commit with message</td></tr><tr><td><code>gp</code></td><td><code>git push</code></td><td>Push changes</td></tr><tr><td><code>gl</code></td><td><code>git pull</code></td><td>Pull latest changes</td></tr><tr><td><code>ga</code></td><td><code>git add</code></td><td>Add files to staging</td></tr><tr><td><code>gaa</code></td><td><code>git add --all</code></td><td>Add all files to staging</td></tr><tr><td><code>gcm</code></td><td><code>git commit -m</code></td><td>Commit with message</td></tr><tr><td><code>gcb</code></td><td><code>git checkout -b</code></td><td>Create new branch and switch to it</td></tr><tr><td><code>gb</code></td><td><code>git branch</code></td><td>List branches</td></tr><tr><td><code>gd</code></td><td><code>git diff</code></td><td>Show changes</td></tr></tbody></table>
<p>Your Git aliases are located in <code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code> and you can find the full list at: <a href="https://kapeli.com/cheat_sheets/Oh-My-Zsh_Git.docset/Contents/Resources/Documents/index" target="_blank" rel="noopener noreferrer">OMZ Git aliases</a>.</p>]]></content>
        <author>
            <name>Dani Vorobiev</name>
            <uri>https://voromir.github.io/about/</uri>
        </author>
        <category label="Terminal" term="Terminal"/>
        <category label="MacOS" term="MacOS"/>
        <category label="Environment" term="Environment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terminal customization]]></title>
        <id>https://voromir.github.io/blog/2024/05/29/setting-up</id>
        <link href="https://voromir.github.io/blog/2024/05/29/setting-up"/>
        <updated>2024-05-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Your environment is your workshop]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="your-environment-is-your-workshop">Your environment is your workshop<a href="https://voromir.github.io/blog/2024/05/29/setting-up#your-environment-is-your-workshop" class="hash-link" aria-label="Direct link to Your environment is your workshop" title="Direct link to Your environment is your workshop">​</a></h2>
<p>As a developer, you will spend some time with your terminal —even if you prefer a GUI. You will run tests, install packages, and use Git, for example. And yes, Git has a GUI, but for some advanced operations you are forced to use the command line. Anyway, the terminal is one of our essential tools, and it's nice to have a visually pleasant and powerful terminal instead of a boring and limited default one. I like to think about it like this:</p>
<blockquote>
<p>Your environment is your workshop and it is more logical to adapt your workshop to your need rather than the contrary.</p>
</blockquote>
<p>A good tool, for me, is one that disappears when you use it. It’s not noticeable because it’s just right for the job it’s supposed to do. It’s frictionless and allows you to focus on the work rather than struggling with the tool. That is what I ideally want to achieve in my tooling setup.</p>
<p>In this post, I will explain how I like to configure and personalize my terminal emulator and hopefully some of this tweaks may be useful for you. We will explore as well what a shell is, what a terminal is, the different kinds of shells available, and how to take better advantage of our terminal configuration. All the examples and configurations will be for MacOS system, although most of them can be applied with small adjustments to Linux as well.</p>
<p>I don't need you to use my setup. My point is that a better world exists—one where you have limitless possibilities and the tools you deserve. Many software tools were created precisely because their creators weren't happy with what was available. And that, I believe, is the essence of engineering: solving real-world problems through technical expertise.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="terminal-is-said-in-many-ways">‘Terminal’ is said in many ways<a href="https://voromir.github.io/blog/2024/05/29/setting-up#terminal-is-said-in-many-ways" class="hash-link" aria-label="Direct link to ‘Terminal’ is said in many ways" title="Direct link to ‘Terminal’ is said in many ways">​</a></h2>
<p>There are a lot of terms that usually are used to refer to the same thing: Terminal, Shell, Command Line, CLI, Console... But not everything is the same. To better understand what we're about to do we need to understand the difference between Shell and Terminal.</p>
<p>The terminal was a device that permitted transcription and entering data in the early computer era. It was an electromechanical device that set and received data from the host, which was called the mainframe. Similarly, nowadays a terminal emulator is a program that provides a text-based interface for human-computer interaction. Different terminal emulators can be GNOME Terminal, Konsole, xterm, Kitty or Warp (an AI enhanced terminal emulator).</p>
<p>Operating systems come with a default terminal emulator, but it's easy to install a different one if preferred, specially if you are working on a UNIX-like system. Later on, we will install another terminal emulator to add more functionality to our system.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-the-shell">What's the shell?<a href="https://voromir.github.io/blog/2024/05/29/setting-up#whats-the-shell" class="hash-link" aria-label="Direct link to What's the shell?" title="Direct link to What's the shell?">​</a></h2>
<p>A shell is an interface for interacting with the kernel. Like any other interface, it hides the internal functions of the kernel and only exposes what the user needs. While the term 'shell' can technically refer to any interface, including a Graphical User Interface (GUI), it is most commonly used to describe a command-line interpreter (CLI). In both cases, the intent is the same: to expose the operating system’s services to users or other programs, with the shell acting as the outermost layer of the operating system. In other words, the shell encapsulates the operating system’s kernel and isolates it from user space. That’s why it’s called a shell.</p>
<p>The command-line shell is an interpreter that runs inside the terminal. We can change our terminal emulator—for example, switching from the macOS Terminal to iTerm2—but as long as we don’t change the shell, we will interact with the system in the same way. The terminal emulator is merely an graphical interface for the shell, which is what we are actually interacting with.</p>
<p>The shell (for examples zsh) can run other processes, for example utilities like <code>grep</code>, <code>ls</code> or <code>cat</code>.</p>
<p>What happens when you run a utility like nano:</p>
<ol>
<li><code>ls</code> (user-level application) doesn’t interact directly with the hardware.</li>
<li>It sends system calls (like <code>getdents()</code> or <code>readdir()</code>) to the kernel.</li>
<li>The kernel translates these system calls into lower-level instructions and interacts with the file system and the hardware (such as the hard drive or SSD) to retrieve or modify data.</li>
<li>The device driver specific to the storage hardware manages the communication between the kernel and the physical storage device.</li>
</ol>
<p>Here we can see the general schema of the linux architecture here:</p>
<p><img decoding="async" loading="lazy" alt="Linux_architecture_preview" src="https://voromir.github.io/assets/images/linux_architecture_preview-e67ee046c2ee4534aa24f10a0c1fa975.png" width="2128" height="1224" class="img_ev3q"></p>
<p>The shell has evolved from a basic command interpreter, the Bourne Shell (sh) (1979), through significant improvements with the Bourne Again Shell (bash) (1989), to a highly versatile and feature-rich tool, the Z Shell (zsh) (1990). Many Linux distributions use <code>bash</code> as the default shell, while most BSD variants rely on <code>sh</code>. Since macOS Catalina (2019), zsh has been the default shell on macOS. If you're interested in the evolution of the shells, please, check out this <a href="https://developer.ibm.com/tutorials/l-linux-shells/" target="_blank" rel="noopener noreferrer">IBM site</a>.</p>
<p>To summarise it, a terminal emulator is a program that provides a text-based user interface. It sends user inputs to the shell and displays the shell’s outputs. The shell is a command-line interpreter that translates high-level commands into system calls to interact with the kernel (the core of the operating system). The kernel manages system resources, including the CPU, memory, and file system. When a command is executed, the kernel performs the requested operations and returns the result to the shell, which then outputs the result to the terminal emulator for the user to see.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shell-in-unix-like-systems">Shell in UNIX-like systems<a href="https://voromir.github.io/blog/2024/05/29/setting-up#shell-in-unix-like-systems" class="hash-link" aria-label="Direct link to Shell in UNIX-like systems" title="Direct link to Shell in UNIX-like systems">​</a></h2>
<p>In UNIX and UNIX-like systems, the current shell is usually defined by the environment variable <code>SHELL</code>. This variable specifies the path to the binary of the default shell. Typically, this binary is located in the binary directory <code>/bin</code> (for example, <code>/bin/bash</code> or <code>/bin/zsh</code>) or <code>/usr/bin</code>. Since the shell it's an application, it can be easly replaced by another one. In Linux you can find the default shell as well using <code>cat /etc/passwd | grep $USER</code>.</p>
<p>Bash and Zsh are maybe the most used shells in UNIX-like systems. Debian, Fedora, Arch and may other linux distributions use Bash as a default shell. Ubuntu, Kali and Parrot use Zsh. As of macOS Catalina (10.15), the default shell for macOS was changed from Bash to Zsh. This change was due to the release of the GPLv3 license, which explicitly disallows the use of GPL-licensed software in a closed system that does not allow the user to modify the software and run it on the machine (see <a href="https://www.gnu.org/philosophy/tivoization.en.html" target="_blank" rel="noopener noreferrer">tivoization</a>).</p>
<p>To find out which shell you are currently using, you can execute:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">echo $SHELL</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you want to change your shell to another one, you can run:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">export SHELL=/bin/bash</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>SHELL</code> variable is temporal and session scoped, which means that it's deleted when you terminate the session. Typically, the system sets the <code>SHELL</code> environment variable based on the default shell specified in your <code>/etc/passwd</code> file. But this setup can be overwritten by the other configurations, like your terminal emulator configuration.</p>
<p>If you want to persist your shell configuration you can use this command instead:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">chsh -s /bin/zsh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And you always can run <code>bash</code> to switch to bash and run <code>zsh</code> or <code>exit</code> to switch to zsh again.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="installing-terminal-emulator">Installing terminal emulator<a href="https://voromir.github.io/blog/2024/05/29/setting-up#installing-terminal-emulator" class="hash-link" aria-label="Direct link to Installing terminal emulator" title="Direct link to Installing terminal emulator">​</a></h2>
<p>On macOS, <a href="https://iterm2.com/features.html" target="_blank" rel="noopener noreferrer">iTerm</a> is the most popular terminal emulator in the dev community. While it resembles a classic console, it offers powerful features like split views, multiple tabs, customizable hotkeys, and extensive configuration options. Accessing the Preferences menu in iTerm reveals a wide range of settings you can adjust to personalize your experience.</p>
<p>iTerm key features:</p>
<ul>
<li>Multiple tabs and split view (panes).</li>
<li>Find and filter content in the terminal</li>
<li>Session Management. Reopen all the tabs exactly as they were.</li>
<li>Good theming and customization options.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="terminal-comparison-table">Terminal Comparison table<a href="https://voromir.github.io/blog/2024/05/29/setting-up#terminal-comparison-table" class="hash-link" aria-label="Direct link to Terminal Comparison table" title="Direct link to Terminal Comparison table">​</a></h2>
<table><thead><tr><th></th><th>Search</th><th>Mouse support</th><th>Theming</th><th>Autosuggest</th><th>History</th><th>O.Source</th><th>Stability</th></tr></thead><tbody><tr><td><strong>MacOS</strong></td><td><em>Basic</em></td><td><em>Basic</em>, no TUI</td><td><em>Basic</em></td><td><em>No</em></td><td><em>Basic</em></td><td><em>no</em></td><td><strong>Great</strong></td></tr><tr><td><strong>iTerm2</strong></td><td><strong>Great</strong></td><td><strong>Full</strong>, tmux</td><td><em>Good</em></td><td><em>Add-on</em> Shell Integration</td><td><em>Good</em></td><td><em>yes</em></td><td><strong>Great</strong></td></tr><tr><td><strong>Warp</strong></td><td><strong>Great</strong>, block</td><td><strong>Full</strong>, Multiline</td><td><strong>Great</strong></td><td><strong>Great</strong>, AI powered</td><td><strong>Great</strong></td><td><em>no</em></td><td><em>Good</em></td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tips-for-using-iterm2">Tips for using iTerm2<a href="https://voromir.github.io/blog/2024/05/29/setting-up#tips-for-using-iterm2" class="hash-link" aria-label="Direct link to Tips for using iTerm2" title="Direct link to Tips for using iTerm2">​</a></h2>
<p>When you open a new pane in iTem2 you probably see something like: Last login: <code>Fri Sep 27 20:11:13 on ttys006</code>. To know all the sessions you are running, use <code>who</code> or <code>w</code> commands. In the output you will see all your terminal sessions running and your system process with the uptime, so at least you will have two results.</p>
<p>Depending on your default permission settings you can experience the "operation not permitted error". If this happens to you, you need to go to your MacOS setting, select Privacy and Security and give Full disk access to iTerm2.</p>
<blockquote>
<p>WARNING: Modifying the iTerm color scheme may prevent text colors from displaying correctly. If you encounter this issue, check the <code>Minimum contrast</code> property in your profile settings and reduce its value.</p>
</blockquote>
<p>The terminal in Linux is very powerful. There are even linux distros without Desktop Manager, like Arch Linux.</p>
<p><code>CMD + Shift + Enter</code> to maximize the current pane in iTerm2.
<code>CMD + Option + Arrows</code> or <code>CMD + [ or ]</code> to switch between the panes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="oh-my-zsh-unleash-your-terminal">Oh My Zsh: Unleash your terminal<a href="https://voromir.github.io/blog/2024/05/29/setting-up#oh-my-zsh-unleash-your-terminal" class="hash-link" aria-label="Direct link to Oh My Zsh: Unleash your terminal" title="Direct link to Oh My Zsh: Unleash your terminal">​</a></h2>
<p>By default <code>zsh</code> comes with very poor configuration, although it has a lot of potential. For example, you can configure a lot of options with <code>setopt</code> command. For example for history you can configure:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt APPEND_HISTORY           # Append commands to history file immediately</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt SHARE_HISTORY            # Share history across multiple terminals</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt HIST_IGNORE_ALL_DUPS     # Avoid duplicate history entries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt HIST_REDUCE_BLANKS       # Strip extra spaces</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt HIST_VERIFY              # Edit before executing history expansion (!stuff)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and for navigation:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt AUTO_CD                  # Just type directory name to cd into it</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt AUTO_PUSHD               # Push to directory stack when cd-ing</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt PUSHD_IGNORE_DUPS        # Don't store duplicate dirs in stack</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setopt EXTENDED_GLOB            # Advanced globbing like (**/*.txt)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But there are much more options and it's a burdon to configure everything and install different plugins manually. Theres is a better option which is a configurator. OhMyZsh is the most popular one. It'a a framework that gives you plugins, themes and configurations right away and makes the setup much easier.</p>
<p><em>Unleash your terminal</em> is the slogan of <a href="https://ohmyz.sh/" target="_blank" rel="noopener noreferrer">Oh My Zsh</a>, an open source community driven Zsh manager. This is one of the quickest and easiest ways to get a powerful yet beautiful terminal in a few steps. They promise you:
<em>Once installed, your terminal shell will become the talk of the town or your money back!</em></p>
<p>To install Oh My Zsh you can:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Some of the OMZ themes require special fonts to show icons and special characters in the terminal. To install the fonts you can go to <a href="https://www.nerdfonts.com/" target="_blank" rel="noopener noreferrer">https://www.nerdfonts.com</a> or just use:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">brew install fonts-powerline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>or</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">brew install --cask font-hack-nerd-font</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The great thing about ZSH is that the support is great and the community is very active, so you can find lots of documentation, configurations and interesting stuff about it online.</p>
<p>The only problem is that out of the box ZSH is poorly configured and it's even worse than bash (reverse search, command history and completion system). But, we have <a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener noreferrer">Oh My Zsh</a>, a community configuration that enables all the most useful functionalities to ZSH and gives it a nicer aspect. Oh My Zsh includes aliases, themes and acts like a plugin manager.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="omz-themes">OMZ themes<a href="https://voromir.github.io/blog/2024/05/29/setting-up#omz-themes" class="hash-link" aria-label="Direct link to OMZ themes" title="Direct link to OMZ themes">​</a></h3>
<p>Your theme, as many of your other configurations is stored in <code>.zshrc</code> file.</p>
<p>You can check the actual theme by printing by <code>ZSH_THEME</code> variable.</p>
<p>To switch between themes you can:</p>
<p><code>omz theme list</code></p>
<p>and set a theme by:</p>
<p><code>omz theme set THEME_NAME</code></p>
<p>You can preview all the different themes at <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes" target="_blank" rel="noopener noreferrer">https://github.com/ohmyzsh/ohmyzsh/wiki/themes</a></p>
<blockquote>
<p>Be aware: Oh My Zsh (OMZ) modifies your <code>.zshrc</code>, so there's a chance of losing some of your configurations that use this file (for example, SDKMAN!). Luckily, you can find your previous configuration at <code>~/.zshrc.pre-oh-my-zsh</code>.</p>
</blockquote>
<p>If you do some mods to your terminal and add some icons and fonts in the iTerm, you won't see these changes in your VSCode terminal. You will need to specify the fonts for this terminal and all other terminals you use as well.</p>
<p>Once you select a theme that you like, you can adjust the colors to your preference. Alternatively, you can visit <a href="https://catppuccin.com/" target="_blank" rel="noopener noreferrer">https://catppuccin.com</a> to download a well-built color scheme that you can use across your other code editors.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="autocomplete-fix">Autocomplete fix<a href="https://voromir.github.io/blog/2024/05/29/setting-up#autocomplete-fix" class="hash-link" aria-label="Direct link to Autocomplete fix" title="Direct link to Autocomplete fix">​</a></h2>
<p>Download zsh plugins:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">git clone https://github.com/zsh-users/zsh-completions.git ~/.oh-my-zsh/custom/plugins/zsh-completions</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">git clone https://github.com/zsh-users/zsh-history-substring-search.git ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Add this plugins to .zshrc</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">autoload -Uz compinit &amp;&amp; compinit</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">plugins=(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    git</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    docker</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    asdf</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    zsh-autosuggestions</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    zsh-completions</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    zsh-history-substring-search</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    zsh-syntax-highlighting</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>you also can edit the editor section:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Preferred editor for local and remote sessions</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">if [[ -n $SSH_CONNECTION ]]; then</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   export EDITOR='vim'</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">else</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   export EDITOR='mvim'</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-prompt">The prompt<a href="https://voromir.github.io/blog/2024/05/29/setting-up#the-prompt" class="hash-link" aria-label="Direct link to The prompt" title="Direct link to The prompt">​</a></h2>
<p>In Oh My Zsh themes, the prompt is already customized out of the box. Nevertheless, if you want something more personalized and built exactly to your needs, you can create your own prompt by configuring special variables in your <code>.zshrc</code> file (for example: PROMPT='%n@%m %~ %# '). Alternatively, you can use a plugin. Back in the day, <em>Powerlevel10k</em> was very popular in the Linux community, but it's no longer actively maintained. However, there are other alternatives like <em>Oh My Posh</em> or <em>Starship</em>.</p>
<p>Starshipis is the most interesting one. It's a fast and customizable prompt for any shell. It allows you to configure your prompt to display information like Git status, system performance, time, and much more in a clean and minimalistic style, without slowing down your terminal. It's highly modular, making it easy to add and adjust functionality.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="aliases">Aliases<a href="https://voromir.github.io/blog/2024/05/29/setting-up#aliases" class="hash-link" aria-label="Direct link to Aliases" title="Direct link to Aliases">​</a></h2>
<p>Aliases are one of the most useful features of the shell. An alias is a custom shortcut for a command or a group of commands. It allows you to run complex or frequently used instructions with a simple keyword in your command line. You can create as many aliases as you want and combine them to build a workflow that fits your needs better. You can read a full post on that in my post <a href="https://voromir.github.io/blog/2025/04/02/aliases">How to use alias</a>. But let's see some basics:</p>
<p>In ZSH you can create an alias using the alias command like this: <code>alias ll='ls -alF'</code>. To list all defined aliases, simply type <code>alias</code>. If you want to check a specific alias, pass its name as a parameter, for example: <code>alias ls</code>. To remove an alias, use the <code>unalias</code> command followed by the name of the alias you want to delete, like this: <code>unalias ll</code>. These aliases are created in you current terminal session, which means that they are not persisted over the sessions.</p>
<p>If you want your aliases to persist across terminal sessions, you need to add them to your <code>.zshrc</code> file or to a custom aliases file that you source from <code>.zshrc</code>. You can do it using redirector: <code>echo "alias ll='ls -alF'" &gt;&gt; ~/.zshrc</code> (but in this case you need to be careful to not itroduce duplicated aliases). After adding or modifying your aliases, you can reload your configuration by running <code>source ~/.zshrc</code>, or <code>omz reload</code> if you are using Oh My Zsh.</p>
<p>If you often add or update your aliases, it's useful to create an alias for reloading your config, like this:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">alias resource='source ~/.zshrc &amp;&amp; echo "Zsh reloaded!"'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-gotcha-with-oh-my-zsh-and-auto_cd">A Gotcha with Oh My Zsh and AUTO_CD<a href="https://voromir.github.io/blog/2024/05/29/setting-up#a-gotcha-with-oh-my-zsh-and-auto_cd" class="hash-link" aria-label="Direct link to A Gotcha with Oh My Zsh and AUTO_CD" title="Direct link to A Gotcha with Oh My Zsh and AUTO_CD">​</a></h3>
<p>If you are using Oh My Zsh or Zsh with AUTO_CD enabled, and you try to enter a directory by typing its name (e.g., git), but there is a program with the same name (e.g., /opt/homebrew/bin/git), the program will be executed instead of changing directories.</p>
<p>This happens because Zsh prioritizes executables in your PATH over the auto-cd feature. To access a directory that shares a name with a program in your PATH, you must use the cd command explicitly. Alternatively, you can disable the AUTO_CD feature by running <code>unsetopt AUTO_CD</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-up-with-tmux">What's up with Tmux<a href="https://voromir.github.io/blog/2024/05/29/setting-up#whats-up-with-tmux" class="hash-link" aria-label="Direct link to What's up with Tmux" title="Direct link to What's up with Tmux">​</a></h2>
<p>Tmux, which stands for Terminal MUltipleXer, is another way of doing things. With tmux you can create a session in a machine, run some commands, detach from it, start another session to run other processes and then attach back to the first one. You can even detach from an SSH session and attach to it from somewhere else using another machine. This is very useful if you frequently use SSH (Secure Shell protocol) to connect to remote machines. Tmux can be customized and there are a lot of community-based setings like <a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener noreferrer">Oh My Tmux!</a> that offers a quick setup with the most used features and a nice appearence.</p>
<p>A lot of people use TMux as a tiling window manager, but iTerm2 and other modern terminal emulators can manage panes in a way similar to TMux. So, if you're already using a custom terminal emulator and don't need session persistence, you might not need TMux.</p>
<p>On the other hand, if you're accustomed to TMux’s way of managing windows and want to make it portable across different machines or need session persistence, then TMux can be the right choice for you.</p>
<p>Luckily, iTerm2 integrates with TMux, and you can find the details by going to Settings &gt; General &gt; TMux.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dont-repeat-yourself-automate-it">Don't repeat yourself: automate it!<a href="https://voromir.github.io/blog/2024/05/29/setting-up#dont-repeat-yourself-automate-it" class="hash-link" aria-label="Direct link to Don't repeat yourself: automate it!" title="Direct link to Don't repeat yourself: automate it!">​</a></h2>
<p>As you can see, it's a long process. But, if you have a configuration that you really like, you can automate it. One way to do it is to use a script. There are multiple scripts on the internet for personalization, like this one for Parrot Linux with bspwm: <a href="https://github.com/xJackSx/BSPWMparrot" target="_blank" rel="noopener noreferrer">https://github.com/xJackSx/BSPWMparrot</a>. Another idea is using ansible to automate the installation. Ansible is cleaner than bash and it uses YAML files to guide your installation. This is out of the scope of this article, but there's something easier we can do to organise and save all our configuration files.</p>
<p>Files like <code>.zshrc</code>, .<code>oh-my-zsh</code>, .<code>gitconfig</code>, and <code>.config/nvim/</code>, also known as dotfiles, reside in your home directory, and over time, you accumulate quite a lot of them. However, when setting up a new machine, you don’t have all the configurations you've built over the years.</p>
<p>To transfer this configuration to a new machine, you can create a dotfiles repository. To do this, create a new folder in your home directory (for example, called "Dotfiles"), move the files you want to track into it, and then create symbolic links (soft links) back to the home directory so that programs can read them. The sequence of commands can look something like this:</p>
<div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">mkdir -p ~/dotfiles</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mv ~/.zshrc ~/dotfiles/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ln -s ~/dotfiles/.zshrc ~/.zshrc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Symbolic links, or symlinks, are a great option for managing dotfiles in a Git repository because they allow you to link directories, preserve the logical structure of your filesystem, and are easy to track and remove. They also have support for cross-filesystem linking. But if you don’t want to create all the symlinks one by one, you can use <a href="https://www.gnu.org/software/stow/" target="_blank" rel="noopener noreferrer">GNU Stow</a> to automate the process. Once you have stored all the necessary configuration files in your dotfiles directory and created the links, you can add this directory to a Git repository to keep track of your configuration files.</p>
<p>When you modify any configuration in the files within your home directory, the actual linked files in your dotfiles directory will be updated as well, allowing you to commit and push these changes to the remote repository. Now, anytime you get a new machine to setup, you can just pull the files from the remote repository and create the symlinks in your new system.</p>
<p>One more thing you can add to this directory is a list of all the packages you have installed with Brew. For that, you can run the following command:</p>
<div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">brew bundle dump --describe</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This will generate a dump file called Brewfile with all your packages in your working directory. Keeping track of this file will help you to reinstall all the needed software in your new machine. To install all the packages from a Brewfile, the only thing you need to do is run <code>brew bundle install</code> in the same directory where you Brewfile is located. You can find more info about how to use <code>brew bundle</code> at <a href="https://gist.github.com/ChristopherA/a579274536aab36ea9966f301ff14f3f" target="_blank" rel="noopener noreferrer">Brew Bundle Brewfile Tips</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="downsides-of-using-iterm--omz">Downsides of using iTerm + OMZ<a href="https://voromir.github.io/blog/2024/05/29/setting-up#downsides-of-using-iterm--omz" class="hash-link" aria-label="Direct link to Downsides of using iTerm + OMZ" title="Direct link to Downsides of using iTerm + OMZ">​</a></h2>
<p>iTerm2 and OMZ are very powerful tools, and their configuration is quite straightforward. However, they have their own drawbacks. One of the major downsides of this setup is speed. iTerm is an excellent terminal emulator, but to be honest, it’s not the fastest one. There are other terminals that are more performance-focused, such as WezTerm, Kitty, and Alacritty. You can see benchmark results in this <a href="https://x.com/mitchellh/status/1871663119187280293" target="_blank" rel="noopener noreferrer">tweet</a>.</p>
<p>On the other hand, OMZ also increases the TTI (time to interactive). Depending on your terminal usage, this may or may not be a significant issue for you. Personally, it’s not a problem for me. But if you want a blazing-fast terminal that lets you open and close multiple windows with almost no delay, you should probably try one of those alternatives. As you can see in the performance benchmarks, the more features a terminal emulator has, the slower it becomes. So, it’s up to you to decide where to draw the line between performance and features.</p>
<p>Another drawback of iTerm2 is that it's not designed to be configured primarily via a config file. While it's possible, the configuration file is not as readable as <code>YAML</code> or <code>TOML</code>, which many other terminal emulators use. So, if you want to automate terminal configuration and rely on a config file, iTerm2 might not be the best option.</p>]]></content>
        <author>
            <name>Dani Vorobiev</name>
            <uri>https://voromir.github.io/about/</uri>
        </author>
        <category label="Terminal" term="Terminal"/>
        <category label="MacOS" term="MacOS"/>
        <category label="Environment" term="Environment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is and MDX file?]]></title>
        <id>https://voromir.github.io/blog/2024/05/26/mdx-trial</id>
        <link href="https://voromir.github.io/blog/2024/05/26/mdx-trial"/>
        <updated>2024-05-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Empowering the text]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="empowering-the-text">Empowering the text<a href="https://voromir.github.io/blog/2024/05/26/mdx-trial#empowering-the-text" class="hash-link" aria-label="Direct link to Empowering the text" title="Direct link to Empowering the text">​</a></h2>
<p>Markdown is a tool that allows you to write using an easy-to-write plain text format, that is converted to structurally valid HTML.
Originally, it was intended to easly create content for the web. And it does it great. It's very intuitive so you can start using it just after learning the basic syntax.
Once you write your plain text with proper Markdown syntax, the Markdown parser will convert it into valid HTML that reflects the intended layout and style.
And lots of great platforms are powered by markdown syntax: Obsidian, Trello, Notion, Stack Overflow, GitHub,
Jekyll, Docusaurus and much more. So if you're getting in the software development world, you will be using
markdown for sure.</p>
<p>With Markdown youcan write text, lists, tables, code blocks, images, links, and much more. Let's put here
an example of each one:</p>
<blockquote>
<p>Text that is a quote</p>
</blockquote>
<ol>
<li>First item</li>
<li>Second item</li>
</ol>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Hello, world!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> is a project for easily building, deploying, and maintaining open source project websites.</p>
<p>These are some of the basic features of markdown. But there's much more. You can finde more detailed information
in the <a href="https://www.markdownguide.org/" target="_blank" rel="noopener noreferrer">Markdown Guide</a> and in the <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener noreferrer">GitHub Markdown Guide</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="from-md-to-mdx">From MD to MDX<a href="https://voromir.github.io/blog/2024/05/26/mdx-trial#from-md-to-mdx" class="hash-link" aria-label="Direct link to From MD to MDX" title="Direct link to From MD to MDX">​</a></h2>
<p>But what if you want to add some interactivity to your markdown file? You can use MDX for that. MDX is a markdown
file that can contain JSX code. Isn't that great? If you use React, you know that JSX is a syntax extension for JavaScript that allows you to write HTML elements
inside your JavaScript code. Once you get used to it, it gets really easy to write pages with this syntax. So with the MDX basically you can write React
components inside your markdown file. Here goes an example:</p>
<div class="bouncing-ball-container"><div class="ball"></div></div>
<p>Which in the code looks like this:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">BouncingBall</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"../src/components/BouncingBall"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// All the markdown content</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">BouncingBall</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Basically, you just import the component and use it as you would use it in a React component. You can also declare variables and pass props to the components.
So you can create a very interactive page with just a markdown file.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-cool-stuff">More cool stuff!<a href="https://voromir.github.io/blog/2024/05/26/mdx-trial#more-cool-stuff" class="hash-link" aria-label="Direct link to More cool stuff!" title="Direct link to More cool stuff!">​</a></h2>
<p>Being able to use JSX in markdown files gives you a lot of power. You can create almost anything you want. You can create a live code editor, for example. Let's have a look:</p>
<div><pre class="prism-code language-tsx" style="margin:0;outline:none;padding:10px;font-family:inherit;color:#d6deeb;background-color:#011627" spellcheck="false"><span class="token-line" style="color:#d6deeb">
</span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span>
</span><span class="token-line" style="color:#d6deeb"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(127, 219, 202)">div</span><span class="token tag" style="color:rgb(127, 219, 202)"> </span><span class="token tag attr-name" style="color:rgb(173, 219, 103);font-style:italic">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(127, 219, 202)"> color</span><span class="token tag script language-javascript operator" style="color:rgb(127, 219, 202)">:</span><span class="token tag script language-javascript" style="color:rgb(127, 219, 202)"> </span><span class="token tag script language-javascript string" style="color:rgb(173, 219, 103)">'rebeccapurple'</span><span class="token tag script language-javascript" style="color:rgb(127, 219, 202)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span>
</span><span class="token-line" style="color:#d6deeb"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(127, 219, 202)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Hello world!</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(127, 219, 202)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span>
</span><span class="token-line" style="color:#d6deeb"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(127, 219, 202)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span>
</span><span class="token-line" style="color:#d6deeb"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(127, 219, 202)">h2</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">You can edit this test in the live editor.</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(127, 219, 202)">h2</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span>
</span><span class="token-line" style="color:#d6deeb"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span>
</span><span class="token-line" style="color:#d6deeb">
</span></pre></div><div style="border:1px solid var(--ifm-color-primary-dark);border-radius:8px;overflow:hidden;margin-top:16px;margin-bottom:30px;background-color:var(--ifm-background-color);color:var(--ifm-color)"><div style="display:flex;align-items:center;background-color:var(--ifm-color-primary);padding:8px;border-top-left-radius:8px;border-top-right-radius:8px"><span style="height:12px;width:12px;border-radius:50%;display:inline-block;margin-right:4px;background-color:red"></span><span style="height:12px;width:12px;border-radius:50%;display:inline-block;margin-right:4px;background-color:yellow"></span><span style="height:12px;width:12px;border-radius:50%;display:inline-block;margin-right:4px;background-color:green"></span></div><div style="border:0px solid var(--ifm-color-primary-dark);border-radius:8px;padding:16px;margin-top:14px;background-color:var(--ifm-background-color);color:var(--ifm-color)"><div></div></div></div>
<p>How cool is that? You can write code and see the result in real-time. And you can do this in a markdown file.</p>]]></content>
        <author>
            <name>Dani Vorobiev</name>
            <uri>https://voromir.github.io/about/</uri>
        </author>
        <category label="mdx" term="mdx"/>
        <category label="markdown" term="markdown"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
</feed>