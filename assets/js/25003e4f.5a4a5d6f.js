"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2838],{4351:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/05/29/setting-up","metadata":{"permalink":"/blog/2024/05/29/setting-up","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-05-29-setting-up.md","source":"@site/blog/2024-05-29-setting-up.md","title":"Terminal setup","description":"You will need a terminal.","date":"2024-05-29T00:00:00.000Z","tags":[{"label":"Terminal","permalink":"/blog/tags/terminal"},{"label":"MacOS","permalink":"/blog/tags/mac-os"},{"label":"Environment","permalink":"/blog/tags/environment"}],"readingTime":12.535,"hasTruncateMarker":false,"authors":[{"name":"Dani Vorobiev","title":"Front End Engineer","url":"https://voromir.github.io/about/","imageURL":"https://i.ibb.co/YTPxvhW/voro-profile.png","key":"dani"}],"frontMatter":{"authors":["dani"],"tags":["Terminal","MacOS","Environment"]},"unlisted":false,"nextItem":{"title":"What is and MDX file?","permalink":"/blog/2024/05/26/mdx-trial"}},"content":"## You will need a terminal.\\n\\n//TODO: Your environment is your workshop and it is more logical to adapt your workshop to your need rather than the countrary.\\n\\nAs a developer, you gonna spend some time with your terminal. Even if you like GUI. You will run tests, install packages and use Git, for exaple. Terminal is one of our main tools and it\'s nice to have a visually pleasant and powerful terminal instead of borring and limited default one. In this post I will explain how I like to configure and personalize my Terminal and the main concepts thet we need to know about: what is the shell, what is the terminal, what is a CLI, what different kinds of shells do we have and how to take the better advantage of our terminal and shell configuration.\\n\\n## Terminal or Shell?\\n\\nThere are a lot of terms that usually are used to refer to the same thing: Terminal, Shell, Command Line, CLI, Console... But not everything is the same. To better understand what we\'re about to do we need to understand the difference between Shell and Terminal.\\n\\nThe terminal was a device that permitted transciption and entering data in the early computer era. It was an elecromechanical device that sended and recieved data form the host, which was called the mainframe. Similarly, nowaday a terminal emulator is a program that provides a text-based interface for the human-computer interaction. Different terminal emulators can be GNOME Terminal, Konsole, xterm, Kitty o Warp (an AI enhanced terminal emulator). Operating systems come with default terminar emulator, but it\'s easy to install whatever terminal emulator you like.\\n\\nYou have tmux as well, which is an abbreviation of Terminal MUltipleXer. With tmux you can create a session in a machine, run some commands, deattach from it, start another session to run other processes and then attach back to the first one. You can even detach from an SSH session and attach to it from somwhere else using another machine. This is very useful if you are usually using SSH (Secure Shell protocol) to connect to remote machines. iTerm integrates tmux and you can find the details going to Settings > General > Tmux.\\n\\nYou can use TMux as a Tiling Window Manager, but there\'s a lot of other options.\\n\\n## What\'s the shell?\\n\\nA shell is an interface to interact with the kernel. As any other interface, it hides the internal function of the kernel and only brings the user what is needed. The shell can be a GUI (Graphical User Interface) or a command line interpreter. In both cases the intend is the same: to expose the operating system services to the human or to other programs, being the shell the outmost layer of the operating system. In other words, the shell encapsulates the operating system kernel and isolates it from the user space. That\'s why it\'s called a shell.\\n\\nThe command-line shell is the interpreter that runs inside the terminal. We can change our terminal emulator, for example from the MacOs terminal to iTerm2, but as long as we don\'t change the Shell, we will be able to interact in the same way with the new terminal. The terminal is only and interface for the Shell which is what you are interacting with. Indeed, Sh Shell was run on the physical terminals, providing the same core functionality that modern shells and terminal emulators carry forward today. Sh Shell was a great improvement and gave a grat power to UNIX introducing Scripting, Redirection, Variables and Control Structures.\\n\\nWhat happens when you run a utility like nano:\\n\\n    1.\\tnano (the user application) doesn\u2019t interact directly with the hardware.\\n    2.\\tIt sends system calls (like open() or read()) to the kernel.\\n    3.\\tThe kernel translates these system calls into lower-level instructions and interacts with the file system and the hardware (such as the hard drive or SSD) to retrieve or modify data.\\n    4.\\tThe device driver specific to the storage hardware manages the communication between the kernel and the physical storage device.\\n\\nHere we can see the general schema of the linux architecture here:\\n\\n![Linux_architecture_preview](/img/linux_architecture_preview.png)\\n\\nThe shell does not communicate directly with the kernel. Instead, it interacts with the kernel through the kernel API or system calls. System calls act as a bridge between the user-space (where the shell runs) and the kernel-space (where the kernel operates).\\n\\nThe shell is defined by the environment variable `SHELL`. This variable specifies the path to the binary of the default shell. Typically, this binary is located in the binary directory `/bin`, so it could be, for example, `/bin/bash` or /bin/zsh. Since the shell it\'s an application, it can be easly replaced by another one.\\n\\nTo find out which shell you are currently using, you can execute:\\n\\n```bash\\necho $SHELL\\n```\\n\\nIf you want to change your shell to another one, you can run:\\n\\n```bash\\nexport SHELL=/bin/bash\\n```\\n\\n`SHELL` variable is temporal and session scoped, which means that it\'s deleted when you terminate the session. Typically, the system sets the `SHELL` environment variable based on the default shell specified in your `/etc/passwd` file. But this setup can be overwritten by the other configurations, like your terminal emulator configuration.\\n\\nIf you want to persist your shell configuration you can use this command instead:\\n\\n```bash\\nchsh -s /bin/zsh\\n```\\n\\nor a quicker option running `bash` to switch to bash and running `zsh` to switch to zsh.\\n\\nShell evolutioned from really basic interpreted to a very powerful tool. There are many shells thet you can use in a UNIX-like system, but the most used are bash and zsh. If you\'re interested in the evolution of the shells, please, check out this [IBM site](https://developer.ibm.com/tutorials/l-linux-shells/).\\n\\nThe great thing about ZSH is that the support is great and the community is very active, so you can file lots of documentation, cofigurations and interesting stuff about it online.\\n\\nThe only problem is that out of the box ZSH is poorly configured and it\'s even worse than bash (LIST THINGS THAT IT DOESENT HAVE). But, we have [Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh), a community configuration that enables all the most udeful functionalities to ZSH and gives it a nicer aspect. Oh My Zsh includes aliases, theemes and acts like a plugin manager.\\n\\nTo switch between themes you can:\\n\\n`omz theme list`\\n\\nand\\n\\n`omz theme set`\\n\\n## Shell communication flow\\n\\nTo summarise it, a terminal emulator is a program that provides a text-based user interface. It sends user inputs to the shell and displays the shell\u2019s outputs. The shell is a command-line interpreter that translates high-level commands into system calls to interact with the kernel (the core of the operating system). The kernel manages system resources, including the CPU, memory, and file system. When a command is executed, the kernel performs the requested operations and returns the result to the shell, which then outputs the result to the terminal emulator for the user to see.\\n\\n## Installing terminal emulator\\n\\nOn macOS, [iTerm](https://iterm2.com/features.html) is the most popular terminal emulator. While it resembles a classic console, it offers powerful features like split views, multiple tabs, customizable hotkeys, and extensive configuration options. Accessing the Preferences menu in iTerm reveals a wide range of settings you can adjust to personalize your experience.\\n\\niTerm key features:\\n\\n-Multiple tabs (with color options), split views.\\n-Find and filter content in the terminal\\n\\n- Session Managment. Reopen all the tabs exactly as they were. When you open a new pane in iTem2 you probably se something like: Last login: `Fri Sep 27 20:11:13 on ttys006`\\n\\nTo know all the sessions you are running, use `who` or `w` commands. In the output you will se al your terminal sessions runnins and your system process with the uptime, so at least you will have two results.\\n\\n- BONUS: broadcast inputs\\n\\nTip: depending on your default permission settings you can experience the \\"operation not permitted error\\". If this happens to you, you need to go to your MacOS setting, select Privacy and Security and give Full disk acess to iTerm2.\\n\\n> WARNING: Modifying the iTerm color scheme may prevent text colors from displaying correctly. If you encounter this issue, check the `Minimum contrast` property in your profile settings and reduce its value.\\n\\nShell: Interprets and executes commands.\\nTerminal: Provides the interface for interacting with the shell.\\n\\nCommands are programs stored on the disk. When a user types a command, the shell searches for it in the directories specified by the PATH environment variable. If found, the shell attempts to execute the command.\\n\\nThe PATH variable is a list of directories that the shell searches for commands. Users can modify the PATH variable to add or remove directories from the search path. This allows users to customize the commands that are available to them.\\n\\nThe terminal in Linux is very powerful. There are even linux distros without Desktop Manager, like Arch Linux.\\n\\nCMD + Shift + Enter to maximize the current pane in iTerm2.\\nCMD + Option + Arrows to switch between the panes.\\n\\n## UNIX based systems\\n\\nWe often hear about UNIX based systems and we know that MacOS and Linux are UNIX based systems. But what is really a UNIX system? Indeed, UNIX has a lot of history behind\\n\\nAs of macOS Catalina (10.15), the default shell for macOS was changed from Bash to Zsh due to licensing reasons (GPLv3).\\n\\n## Other types of shells:\\n\\nCloud shell: is a browser-based command-line interface provided by cloud service providers to manage cloud resources, run scripts, debug code, and experiment with new tools or technologies. It\'s common to use cloud shell to interact with services like DynamoDB, S3, and BigQuery.\\n\\nReverse Shell: A reverse shell is a type of cyberattack technique where an attacker establishes a connection back to a compromised victim\'s machine. This connection allows the attacker to gain remote access and execute commands on the victim\'s system, essentially taking control of the machine. It\'s not a technology in itself but rather a method used by attackers to exploit vulnerabilities and gain unauthorized access.\\n\\n## Unleash your terminal\\n\\n_Unleash your terminal_ is the slogan of [Oh My Zsh](https://ohmyz.sh/), an open source community driven Zsh manager. This is one of the quickest an easiest ways to get a powerful yet beautiful terminal in a few steps. They promise you:\\n_Once installed, your terminal shell will become the talk of the town or your money back!_\\n\\nTo install Oh My Zsh you can:\\n\\n```bash\\nsh -c \\"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\\"\\n```\\n\\nTo install the fonts, use:\\n\\n```bash\\nbrew install fonts-powerline\\n```\\n\\n-MY ZSH + Fonts + iTerm\\n[Fonts an characters cheatsheet](https://www.nerdfonts.com/#home)\\nIf you do some mods to you terminal and add some icons and fonts in the iTerm, maybe you won\'t see this changes in your VSCode terminal. You will need to specify the fonts for this terminal as well. While using the escapment characters is more stily, if you don\'t want to spend extra time in configuration, just use emojis.\\n\\n- Powerlevel10k or agnoster. Youc can use other themes like Cappuccin (https://catppuccin.com) or those placed in you theme directory (`~/.oh-my-zsh/themes/`).\\n\\n//TODO: include script to do it in a single step.\\n\\nInstall Imgcat:\\n\\n```sh\\ncurl -O https://iterm2.com/utilities/imgcat\\nchmod +x imgcat\\n```\\n\\nmove it to your path\\n\\n```sh\\nsudo mv imgcat /usr/local/bin/\\n```\\n\\nInstall Yazi\\n\\n```powershell\\nbrew install yazi\\n```\\n\\nand allow to show hidden files by creating\\n\\n```yaml\\n# yazi.toml\\n[manager]\\nshow_hidden = true\\n```\\n\\nin `~/.config/yazi/`\\n\\n## Autocomplete fix\\n\\nDownload zsh plugins:\\n\\n```sh\\ngit clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\\ngit clone https://github.com/zsh-users/zsh-completions.git ~/.oh-my-zsh/custom/plugins/zsh-completions\\ngit clone https://github.com/zsh-users/zsh-history-substring-search.git ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search\\n```\\n\\nAdd this plugins to .zshrc\\n\\n```sh\\nautoload -Uz compinit && compinit\\n\\nplugins=(\\n    git\\n    docker\\n    asdf\\n    zsh-autosuggestions\\n    zsh-completions\\n    zsh-history-substring-search\\n    zsh-syntax-highlighting\\n)\\n```\\n\\nyou also can edit the editor section:\\n\\n```sh\\n# Preferred editor for local and remote sessions\\nif [[ -n $SSH_CONNECTION ]]; then\\n   export EDITOR=\'vim\'\\nelse\\n   export EDITOR=\'mvim\'\\nfi\\n```\\n\\n## Further personalization\\n\\n- Fuzzy finder. People use fzf. But if you use Warp, you don\'t need it because it come out of the box. Warp is written in Rust.\\n- Warp: CMD + Ctrl + t for the theme switcher.\\n- Multiline edition\\n- Zoxyde\\n- Install Cppuccin in warp:\\n  copy: `https://github.com/catppuccin/warp/blob/main/themes/catppuccin_mocha.yml` to `~/.warp/themes`. Create it if it\'s not there.\\n\\n- Starship\\n\\n- Aliases with custom scripts\\n\\n## Terminal configs\\n\\nInfinite lines scroll.\\n\\n## Aliases\\n\\nYou can set alias like this:\\n\\n```bash\\nalias ll=\'ls -alF\'\\n```\\n\\nIf you want to persist your aliases over the current session, you need to store them in your shell config file, e.g.:`~/.bashrc` or `~/.zshrc`. This file loads every time you open a new terminal session and it modifies your $PATH variable in the runtime.\\n\\n(That\'s why when you install Brew it asks you to add the binary location to your path)\\n\\nIf you edit your `.zshrc` file you will need to open a new terminal or do `source ~/.zshrc` o reload the shell cofiguration.\\n\\nIf you want to change the location of `.zshrc` you need to set it up in `.zprofile` file.\\n\\nYou can list all currently defined aliases using the command:\\n\\n```bash\\nalias\\n```\\n\\nOr you can check a specific alias:\\n\\n```bash\\nalias ll\\n```\\n\\nAlternatively, you can use `type ll` to know which command will be run. This command shows you if it\'s a shell built in, an alias or a binary.\\n\\nUnsetting an Alias\\nYou can remove an alias with the unalias command:\\n\\n```bsh\\nunalias ll\\n```\\n\\nHow alias work?\\nAlias expansion:\\n\\n1. Tockenization\\n2. Alias lookup: The shell first checks if the first word of your command matches an alias in some of your configuration files. If it does, it replaces that word with the alias\'s definition. This process is known as alias expansion.\\n3. Command execution\\n\\nAlias porecedence: By default, alias expansion is disabled in non-interactive shells (like scripts) to avoid unexpected behavior. But if you have both a shell function and an alias with the same name, the function will take precedence over the alias.\\n\\n-Mac plugins: Alfred, Rectangle. This two can be done by Rofi of Fzf in Linux environment. In other blog entry I show how to configure it Ubuntu and Parrot.\\n\\n## Chrome plugins\\n\\n-Chrome plugins: JSON, CSS Outline, DarkMode, ShewTabNumbers, React DeveloprTools, ModHeader, Redux DevTools.\\n\\n## Automate it in a script\\n\\nAs you can see, it\'s a long process. But, if you have a configuration that you really like, you can automate it.\\nThere are multiple scripts on the internet for personalization, like this one for Parrot Linux with bspwm: https://github.com/xJackSx/BSPWMparrot\\n\\n## Bonus\\n\\nNeofetch and lolcat. Now that you setted up a nice terminal with your custom prompot and your favourite shell is time to show-off. Neofetch is a improved screenfetch that displays system information in a esthetic way and customizable format. You can use it if you don\'t remember your machine\'s specs or just to showcase your terminal configuration. You can edit the config in .config/neofetch/config.conf. Lolcat, on the other hand, is a modified cat that displays text in playful rainbow color. You can pipe your neofetch into it or any other thext output."},{"id":"/2024/05/26/mdx-trial","metadata":{"permalink":"/blog/2024/05/26/mdx-trial","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-05-26-mdx-trial.mdx","source":"@site/blog/2024-05-26-mdx-trial.mdx","title":"What is and MDX file?","description":"Empowering the text","date":"2024-05-26T00:00:00.000Z","tags":[{"label":"mdx","permalink":"/blog/tags/mdx"},{"label":"markdown","permalink":"/blog/tags/markdown"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.16,"hasTruncateMarker":false,"authors":[{"name":"Dani Vorobiev","title":"Front End Engineer","url":"https://voromir.github.io/about/","imageURL":"https://i.ibb.co/YTPxvhW/voro-profile.png","key":"dani"}],"frontMatter":{"authors":["dani"],"tags":["mdx","markdown","docusaurus"]},"unlisted":false,"prevItem":{"title":"Terminal setup","permalink":"/blog/2024/05/29/setting-up"}},"content":"import BouncingBall from \\"../src/components/BouncingBall\\";\\nimport LiveCodeExample from \\"../src/components/LiveCodeExample\\";\\n\\n\\n## Empowering the text\\n\\nMarkdown is a tool that allows you to write using an easy-to-write plain text format, that is converted to structurally valid HTML.\\nOriginally, it was intended to easly create content for the web. And it does it great. It\'s very intuitive so you can start using it just after learning the basic syntax.\\nOnce you write your plain text with proper Markdown syntax, the Markdown parser will convert it into valid HTML that reflects the intended layout and style.\\nAnd lots of great platforms are powered by markdown syntax: Obsidian, Trello, Notion, Stack Overflow, GitHub,\\nJekyll, Docusaurus and much more. So if you\'re getting in the software development world, you will be using\\nmarkdown for sure.\\n\\nWith Markdown youcan write text, lists, tables, code blocks, images, links, and much more. Let\'s put here\\nan example of each one:\\n\\n> Text that is a quote\\n\\n1. First item\\n2. Second item\\n\\n```javascript\\nconsole.log(\\"Hello, world!\\");\\n```\\n\\n[Docusaurus](https://docusaurus.io) is a project for easily building, deploying, and maintaining open source project websites.\\n\\nThese are some of the basic features of markdown. But there\'s much more. You can finde more detailed information\\nin the [Markdown Guide](https://www.markdownguide.org/) and in the [GitHub Markdown Guide](https://guides.github.com/features/mastering-markdown/).\\n\\n## From MD to MDX\\n\\nBut what if you want to add some interactivity to your markdown file? You can use MDX for that. MDX is a markdown\\nfile that can contain JSX code. Isn\'t that great? If you use React, you know that JSX is a syntax extension for JavaScript that allows you to write HTML elements\\ninside your JavaScript code. Once you get used to it, it gets really easy to write pages with this syntax. So with the MDX basically you can write React\\ncomponents inside your markdown file. Here goes an example:\\n\\n<BouncingBall />\\n\\nWhich in the code looks like this:\\n\\n```jsx\\nimport BouncingBall from \\"../src/components/BouncingBall\\";\\n\\n// All the markdown content\\n\\n<BouncingBall />;\\n```\\n\\nBasically, you just import the component and use it as you would use it in a React component. You can also declare variables and pass props to the components.\\nSo you can create a very interactive page with just a markdown file.\\n\\n## More cool stuff!\\n\\nBeing able to use JSX in markdown files gives you a lot of power. You can create almost anything you want. You can create a live code editor, for example. Let\'s have a look:\\n\\n<LiveCodeExample />\\n\\nHow cool is that? You can write code and see the result in real-time. And you can do this in a markdown file."}]}}')}}]);